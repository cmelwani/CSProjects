
Name: Cheryl Melwani
Date: 27th February 2020

A. The title of the homework and the author's name (you)
Title: RPNCalculator               Author: CHERYL MELWANI (cmelwa01)

B. The purpose of the program
The purpose of the program is to build a calculator that takes in different
commands. The calculator can go through many different

C. Acknowledgements for any help you received
I received help from the TA's, I went through the entire spec a couple of times
with some friends and discussed key concepts. I received help from the TA's
about topics like try and catch.

D. The files that you provided and a short description of what each file is and
its purpose.

DatumStack.cpp + DatumStack.h: The DatumStack class implements vector.h
in order to create the stack properly. The DatumStack is pretty much a datum
vector with limited capabilities. The DatumStack also includes Datum.h since
it is a stack of Datums.

testDatumStack.cpp: This file tests the Datum Stack class and its specific
functions inside.

Parser.cpp: The Parser class implements the RString parser and tests it.
It returns the RString as a string if the brackets are valid. If the brackets
are not valid then the program will throw an error (if the program is
reading FROM A FILE). If the program is reading from a user input and the user
inputs an incorrect rString, the error will not be thrown and the program will
wait for another closing bracket to be inputted by the user.
If the user states that they are done inputting values, by pressing control + d
then the program will throw that error.

RPNCalc.h: This h file has all of declarations of all of the private and public
functions needed for the RPNCalc class. I also create a datum stack in my
this file to use in my corresponding .cpp file. The RPNCalc class is also
declared in the h file.

RPNCalc.cpp: This file holds the implementation to all the private and public
functions declared in the .h file. It implements these functions and catches
any errors being thrown throughout the code as well. This file contains the
main bulk of the program in which DatumStack.h and Datum.h are being used
in order to fully implement RPN Calculator. This class uses a DatumStack to
implement the specific functions in the calculator like mod, exec, file,
operations and so on and so forth.

testRPNCalc.cpp: This file holds all the unit testing I conducted to make sure
my RPNCalc was working well. I also wrote down a lot more edge cases and
tested them out as I went along which helped me catch a lot of the bugs.
I used the demo as a reference.

test_commands.txt & fact.cyl: The first testing file is one that I created
in order to make sure that I can pipe in a file as well as read in from cin.
The second testing file was provided by the Professor and helped me test my
if function to see if that was working properly.

E. How to compile and run your program
    1.make and then ./CalcYouLater
    2.clang++ -o CalcYouLater -Wall -Wextra main.cpp RPNCalc.cpp Datum.o
    DatumStack.cpp

F. An outline of the data structures and algorithms that you used.
   Given that this is a data structures class, you need to always
   discuss the the data structure that you used and justify why
   you used it.  Please discuss the features of the stack data
   structure and also include (with some justification/explanation)
   two other situations/circumstances/problems where you could
   utilize a stack.  The algorithm overview is always relevant.
   Please pick a couple interesting/complex algorithms to discuss
   in the README.

   The data structure I used in this program is a Datum Stack which is a stack
   of Datum type elements. I used the stack data structure in order to
   implement the calculator in an efficient way. Since a stack has a last in,
   first out feature (LIFO) where it simply can add and remove elements in a
   particular way, this feature works with a calculator's needs. A Calculator
   has simple functionality requirements where it needs to be able to read
   operations and delete them once they're done reading. The stack's simple
   functionality is able to carry out these functions, which is why it is
   fit for a calculator. Having a data structure that's more flexible may
   complicate the implementation of a calculator.

  two other situations:
  1. Simulating a Russian doll in a program would use the stack. Push would be
  equivalent to inserting smaller dolls into a bigger doll and popping
  would be equivalent to taking out the bigger dolls that encapsulates the
  smaller dolls.

  2.you would use a stack if you wanted to create a program that functions
  the same way as the back button on a web browser. The current page gets
  pushed on to the stack when you go to the next page and when you go to the
  back page, the page on the stack gets popped off and inserted onto the
  browser.


G. Details and an explanation of how you tested the various parts
   of assignment and the program as a whole. You may reference
   the testing files that you submitted to aid in your explanation.

   Using testRPNCalc.cpp and testDatumStack.cpp and parser.cpp I was able to
   unit test RPNCalc.cpp DatumStack.cpp and the parser function inside
   parser.cpp. For RPNCalc.cpp I unit tested the errors that I threw and cerr
   in my functions and I also made sure that the simple cases and a lot of the
   edge cases worked. I didn't use my unit test to test all the edge cases but
   rather went through the demo program and wrote down a lot of the edge cases
   and then using cin I tested them out and took either screenshots if something
   wasn't working or if it was an error I hadn't seen before. I noted it down
   in my TO DO at the top of my RPNCalc.cpp function after finding another edge
   cases. While I did unit test to make sure that my functions were working
   as I went along writing my code. At the end I very much used the demo to
   find more edge cases and made more changes that aren't all shown in my unit
   testing testRPNCalc.cpp file. I also tried and catched errors which really
   helped with testing files properly and debugging the errors being produced
   by different edge cases.
