
/**********************************************************
* HW4: BinarySearchTree
* Comp 15
* README
* CHERYL MELWANI (cmelwa01)
* March 12, 2020
*********************************************************/

Compile/run:
compile: make
run: ./hw4


Program Purpose:
The purpose of this program is to create a class called binarysearchtree that
mimics the functions of a binary search tree such as insert and removing a node.

Acknowledgements:
I got help from TA's to do the assignment such as Kevin. A lot of the functions
written were discussed in lectures and the review session as well so I got
help from the content provided by the class as well. 

Files:
BinarySearchTree.cpp -> This cpp files holds the implementation of the
binarysearchtree class. This file handles the programs functionality and
should be able to remove and insert nodes, and count the total number of nodes
and so on and so forth.

BinarySearchTree.h -> The h file contains the public and private functions and
variables of the class BinarySearchTree.

hw4.cpp -> The testing file provided by COMP15 in order to see whether the
functionality written in binarysearchtree.cpp is working well.

testBinarySearchTree.cpp -> Testing file created by me in order to gradually
check as I work on my functions whether those functions are working or not.
This file is also used to check edge cases that the provided test file doesn't
check such as deleting a root node.

Data Structures:
The data structure created in this assignment is a binary search tree. The
binary search tree is a data structure that has an invariant. All the functions
written work on the basis that the invariant is true all the time. A BST is
useful because of its invariant where the left child of a node will always be
smaller than the node and the right child of a node will always be bigger.
This is useful because finding nodes (such as the min and max of the tree)
or removing or inserting takes a shorter amount of run time because the
invariant of a BST is always true. It takes a shorter time to find the node
you're looking for because of the invariant.

Testing:
I tested my functions as I went along and used both the test file provided
and created my own. I copied bits of code from the test file and created
some other code based on edge cases that weren't tested in the provided file.
I then diff-ed my program with the provided test file and the provided reference
./the_hw4 to see check whether my output was correct and it was.
